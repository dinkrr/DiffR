//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from DiffRHelper.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class DiffRHelperParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, INT=5, ID=6, NUM=7, COMMA=8, DOT=9, WS=10;
	public const int
		RULE_message = 0, RULE_line = 1, RULE_text = 2, RULE_jsonObj = 3;
	public static readonly string[] ruleNames = {
		"message", "line", "text", "jsonObj"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "'{'", "'}'", null, null, null, "','", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, "INT", "ID", "NUM", "COMMA", "DOT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DiffRHelper.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static DiffRHelperParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public DiffRHelperParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public DiffRHelperParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class MessageContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(DiffRHelperParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public MessageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_message; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDiffRHelperListener typedListener = listener as IDiffRHelperListener;
			if (typedListener != null) typedListener.EnterMessage(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDiffRHelperListener typedListener = listener as IDiffRHelperListener;
			if (typedListener != null) typedListener.ExitMessage(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDiffRHelperVisitor<TResult> typedVisitor = visitor as IDiffRHelperVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMessage(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MessageContext message() {
		MessageContext _localctx = new MessageContext(Context, State);
		EnterRule(_localctx, 0, RULE_message);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 8;
				line();
				}
				}
				State = 11;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((_la) & ~0x3f) == 0 && ((1L << _la) & 994L) != 0 );
			State = 13;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public JsonObjContext[] jsonObj() {
			return GetRuleContexts<JsonObjContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public JsonObjContext jsonObj(int i) {
			return GetRuleContext<JsonObjContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextContext[] text() {
			return GetRuleContexts<TextContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextContext text(int i) {
			return GetRuleContext<TextContext>(i);
		}
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDiffRHelperListener typedListener = listener as IDiffRHelperListener;
			if (typedListener != null) typedListener.EnterLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDiffRHelperListener typedListener = listener as IDiffRHelperListener;
			if (typedListener != null) typedListener.ExitLine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDiffRHelperVisitor<TResult> typedVisitor = visitor as IDiffRHelperVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(Context, State);
		EnterRule(_localctx, 2, RULE_line);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 16;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 15;
				text();
				}
				}
				State = 18;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((_la) & ~0x3f) == 0 && ((1L << _la) & 994L) != 0 );
			State = 20;
			jsonObj();
			State = 22;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 21;
				text();
				}
				}
				State = 24;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((_la) & ~0x3f) == 0 && ((1L << _la) & 994L) != 0 );
			State = 26;
			jsonObj();
			State = 28;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 27;
					text();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 30;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(DiffRHelperParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(DiffRHelperParser.NUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(DiffRHelperParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(DiffRHelperParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT() { return GetToken(DiffRHelperParser.DOT, 0); }
		public TextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_text; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDiffRHelperListener typedListener = listener as IDiffRHelperListener;
			if (typedListener != null) typedListener.EnterText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDiffRHelperListener typedListener = listener as IDiffRHelperListener;
			if (typedListener != null) typedListener.ExitText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDiffRHelperVisitor<TResult> typedVisitor = visitor as IDiffRHelperVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextContext text() {
		TextContext _localctx = new TextContext(Context, State);
		EnterRule(_localctx, 4, RULE_text);
		try {
			State = 41;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 32;
				Match(ID);
				}
				break;
			case NUM:
				EnterOuterAlt(_localctx, 2);
				{
				State = 33;
				Match(NUM);
				}
				break;
			case COMMA:
				EnterOuterAlt(_localctx, 3);
				{
				State = 34;
				Match(COMMA);
				}
				break;
			case INT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 35;
				Match(INT);
				}
				break;
			case T__0:
				EnterOuterAlt(_localctx, 5);
				{
				State = 36;
				Match(T__0);
				State = 37;
				Match(ID);
				State = 38;
				Match(INT);
				State = 39;
				Match(T__1);
				}
				break;
			case DOT:
				EnterOuterAlt(_localctx, 6);
				{
				State = 40;
				Match(DOT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonObjContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		public JsonObjContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonObj; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDiffRHelperListener typedListener = listener as IDiffRHelperListener;
			if (typedListener != null) typedListener.EnterJsonObj(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDiffRHelperListener typedListener = listener as IDiffRHelperListener;
			if (typedListener != null) typedListener.ExitJsonObj(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDiffRHelperVisitor<TResult> typedVisitor = visitor as IDiffRHelperVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonObj(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonObjContext jsonObj() {
		JsonObjContext _localctx = new JsonObjContext(Context, State);
		EnterRule(_localctx, 6, RULE_jsonObj);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 43;
			Match(T__2);
			State = 44;
			text();
			State = 45;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,10,48,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,1,0,4,0,10,8,0,11,0,12,0,11,
		1,0,1,0,1,1,4,1,17,8,1,11,1,12,1,18,1,1,1,1,4,1,23,8,1,11,1,12,1,24,1,
		1,1,1,4,1,29,8,1,11,1,12,1,30,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,
		42,8,2,1,3,1,3,1,3,1,3,1,3,0,0,4,0,2,4,6,0,0,52,0,9,1,0,0,0,2,16,1,0,0,
		0,4,41,1,0,0,0,6,43,1,0,0,0,8,10,3,2,1,0,9,8,1,0,0,0,10,11,1,0,0,0,11,
		9,1,0,0,0,11,12,1,0,0,0,12,13,1,0,0,0,13,14,5,0,0,1,14,1,1,0,0,0,15,17,
		3,4,2,0,16,15,1,0,0,0,17,18,1,0,0,0,18,16,1,0,0,0,18,19,1,0,0,0,19,20,
		1,0,0,0,20,22,3,6,3,0,21,23,3,4,2,0,22,21,1,0,0,0,23,24,1,0,0,0,24,22,
		1,0,0,0,24,25,1,0,0,0,25,26,1,0,0,0,26,28,3,6,3,0,27,29,3,4,2,0,28,27,
		1,0,0,0,29,30,1,0,0,0,30,28,1,0,0,0,30,31,1,0,0,0,31,3,1,0,0,0,32,42,5,
		6,0,0,33,42,5,7,0,0,34,42,5,8,0,0,35,42,5,5,0,0,36,37,5,1,0,0,37,38,5,
		6,0,0,38,39,5,5,0,0,39,42,5,2,0,0,40,42,5,9,0,0,41,32,1,0,0,0,41,33,1,
		0,0,0,41,34,1,0,0,0,41,35,1,0,0,0,41,36,1,0,0,0,41,40,1,0,0,0,42,5,1,0,
		0,0,43,44,5,3,0,0,44,45,3,4,2,0,45,46,5,4,0,0,46,7,1,0,0,0,5,11,18,24,
		30,41
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
